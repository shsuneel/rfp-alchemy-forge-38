import { useState, useEffect } from "react";
import { X, Plus, Users } from "lucide-react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";
import axios from "axios";
import { Collaborator } from "@/store/rfpSlice";

interface TeamProps {
  onTeamChange: (collaborators: Collaborator[]) => void;
  initialTeam: Collaborator[];
}

const ROLES = [
  "Project Manager",
  "Technical Lead",
  "Developer",
  "Designer",
  "Business Analyst",
  "Tester",
  "DevOps Engineer",
  "Architect",
  "Solutions Architect",
  "Client Manager",
];

const Team = ({ onTeamChange, initialTeam }: TeamProps) => {
  const [collaborators, setCollaborators] = useState<Collaborator[]>(initialTeam);
  
  const emailPlaceholder = `Subject: Invitation to Collaborate on RFP
  
Body:
Dear [Collaborator's Name],

I hope this message finds you well.

You have been invited to collaborate on a new Request for Proposal (RFP). Based on your role as [Role], you will have access to the relevant sections and permissions within the RFP platform.

Please click the link below to access the RFP and begin your contributions:
[RFP Link â€“ auto-generated by backend]

If you have any questions or need assistance, feel free to reach out.

Looking forward to your valuable input.

Best regards,
[Your Name]
[Your Organization]`;
  const [emailBody, setEmailBody] = useState<string>(emailPlaceholder);
  const [isSendingEmail, setIsSendingEmail] = useState<boolean>(false);

  useEffect(() => {
    if (initialTeam) {
      setCollaborators(initialTeam.map(member => ({ ...member, responsibilities: member.responsibilities || "" })));
    }
  }, [initialTeam]);

  const userEnteredCollaborators = collaborators.filter(m => m.id !== "thor-id" && m.id !== "collaborator-default");

  const canAddMoreCollaborators = () => {
    if (userEnteredCollaborators.length === 0) {
      return true;
    }
    const lastMember = userEnteredCollaborators[userEnteredCollaborators.length - 1];
    return lastMember.name.trim() !== "" && lastMember.email.trim() !== "";
  };

  const handleAddMember = () => {
    if (!canAddMoreCollaborators()) {
      toast.error("Please fill in the Name and Email for the current collaborator before adding a new one.");
      return;
    }

    const newMember: Collaborator = {
      id: Math.random().toString(36).substring(2, 9),
      name: "",
      email: "",
      role: "Developer",
      responsibilities: ""
    };

    const newTeam = [...collaborators, newMember];
    setCollaborators(newTeam);
    onTeamChange(newTeam);
  };

  const handleRemoveMember = (id: string) => {
    const newTeam = collaborators.filter(member => member.id !== id);
    setCollaborators(newTeam);
    onTeamChange(newTeam);
  };

  const handleMemberChange = (id: string, field: keyof Collaborator, value: string) => {
    const newTeam = collaborators.map(member =>
      member.id === id ? { ...member, [field]: value } : member
    );

    setCollaborators(newTeam);
    onTeamChange(newTeam);
  };

  const handleEmailBodyChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setEmailBody(e.target.value);
  };

  const handleSendEmail = async () => {
    setIsSendingEmail(true);

    const collaboratorsToSend = userEnteredCollaborators;

    if (collaboratorsToSend.length === 0) {
      toast.error("Please add at least one collaborator.");
      setIsSendingEmail(false);
      return;
    }

    const invalidCollaborator = collaboratorsToSend.find(
      member => !member.name.trim() || !member.email.trim()
    );

    if (invalidCollaborator) {
      toast.error("Please ensure all collaborators have a name and email filled out.");
      setIsSendingEmail(false);
      return;
    }
    
    // Filter again to ensure only valid emails are processed, though name is also checked now
    const validEmailCollaborators = collaboratorsToSend.filter(member => member.email.trim() !== "");
    if (validEmailCollaborators.length === 0) {
        toast.error("No collaborators with valid emails to send to.");
        setIsSendingEmail(false);
        return;
    }


    try {
      const response = await axios.post("http://localhost:3020/rfp/inviteCollaborators", {
        emailBody: emailBody,
        collaborators: validEmailCollaborators, // Send only those who passed all checks
      });

      if (response.status === 200 || response.status === 201) {
        toast.success("Emails sent successfully to collaborators!");
      } else {
        toast.error(`Failed to send emails: ${response.data.message || "Unknown error"}`);
      }
    } catch (error) {
      console.error("Error sending email:", error);
      if (axios.isAxiosError(error) && error.response) {
        toast.error(`Error: ${error.response.data.message || error.message}`);
      } else if (error instanceof Error) {
        toast.error(`Error: ${error.message}`);
      } else {
        toast.error("An unexpected error occurred while sending emails.");
      }
    } finally {
      setIsSendingEmail(false);
    }
  };
  
  const areAllCollaboratorsValid = () => {
    if (userEnteredCollaborators.length === 0) return false; // No collaborators to send to
    return userEnteredCollaborators.every(
      member => member.name.trim() !== "" && member.email.trim() !== ""
    );
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Users className="h-5 w-5" />
          Collaborator
        </CardTitle>
        <CardDescription>
          Add collaborators who will be involved in this RFP. Invited collaborators will get access to the RFP builder.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label>Collaborators</Label>
            <div className="flex gap-2">
              <Button
                type="button"
                size="sm"
                variant="outline"
                onClick={handleAddMember}
                className="flex items-center gap-1"
                disabled={!canAddMoreCollaborators()}
              >
                <Plus className="h-3 w-3" /> Add Collaborator
              </Button>
            </div>
          </div>

          {userEnteredCollaborators.map((member, index) => (
            <div key={member.id} className="p-4 border rounded-md relative space-y-3">
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className="absolute right-2 top-2 h-6 w-6"
                onClick={() => handleRemoveMember(member.id)}
              >
                <X className="h-4 w-4" />
              </Button>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                <div>
                  <Label htmlFor={`member-name-${index}`}>Name <span className="text-destructive">*</span></Label>
                  <Input
                    id={`member-name-${index}`}
                    value={member.name}
                    onChange={(e) => handleMemberChange(member.id, 'name', e.target.value)}
                    placeholder="Enter name"
                    className="mt-1"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor={`member-email-${index}`}>Email <span className="text-destructive">*</span></Label>
                  <Input
                    id={`member-email-${index}`}
                    value={member.email}
                    onChange={(e) => handleMemberChange(member.id, 'email', e.target.value)}
                    placeholder="Enter email"
                    type="email"
                    className="mt-1"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor={`member-role-${index}`}>Role</Label>
                  <Select
                    value={member.role}
                    onValueChange={(value) => handleMemberChange(member.id, 'role', value)}
                  >
                    <SelectTrigger id={`member-role-${index}`} className="mt-1">
                      <SelectValue placeholder="Select role" />
                    </SelectTrigger>
                    <SelectContent>
                      {ROLES.map(role => (
                        <SelectItem key={role} value={role}>
                          {role}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor={`member-responsibilities-${index}`}>Responsibilities</Label>
                <Textarea
                  id={`member-responsibilities-${index}`}
                  value={member.responsibilities || ""}
                  onChange={(e) => handleMemberChange(member.id, 'responsibilities', e.target.value)}
                  placeholder="Describe responsibilities for this RFP"
                  className="mt-1"
                  rows={3}
                />
              </div>
            </div>
          ))}
        </div>

        <div className="mt-6 pt-4 border-t">
          <h4 className="text-md font-semibold mb-2">Email with Text</h4>
          <p className="text-sm text-muted-foreground mb-2">
            Compose an email to collaborators.
          </p>
          <div className="space-y-2 mt-2">
            <Textarea value={emailBody} onChange={handleEmailBodyChange} rows={10} />
            <Button 
              onClick={handleSendEmail} 
              disabled={isSendingEmail || !areAllCollaboratorsValid()}
            >
              {isSendingEmail ? "Sending..." : "Send Email"}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default Team;
